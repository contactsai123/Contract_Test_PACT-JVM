/**
 * This pipeline builds Microservice and runs smoke and API tests, running in the same Pod but in separate containers
 * and in parallel
 */
 
def label = "maven-selenium-${UUID.randomUUID().toString()}"

podTemplate(label: label, yaml: """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: gradle
    image: keeganwitt/docker-gradle-root
    command: ['cat']
    tty: true
  - name: maven
    image: zenika/alpine-maven
    command: ['cat']
    tty: true
  - name: docker
    image: docker
    command: ['cat']
    tty: true
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:v1.8.8
    command: ['cat']
    tty: true
""",
volumes: [
  hostPathVolume(mountPath: '/home/gradle/.gradle', hostPath: '/tmp/jenkins/.gradle'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock')
] ) {

  node(label) {
  
  
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def shortGitCommit = "${gitCommit[0..10]}"
    def previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
    sh "whoami"
 
     stage('Run kubectl') {
      container('kubectl') {
        echo "Inside kubectl user!"
        sh "kubectl get pods"
      }
    }
    
    
    stage('Build Project') {
      try {
        container('gradle') {
            sh "pwd"
            echo "Inside Gradle container!"
            sh "chmod +x gradlew"
            sh "./gradlew build -xtest"
            }
      }
      catch (exc) {
        println "Failed to test - ${currentBuild.fullDisplayName}"
        throw(exc)
      }
    }
    stage('Contract Test') {
      container('gradle') {
      sh "chmod +x gradlew"
      sh "./gradlew test pactPublish"
      sh "./gradlew pactVerify"
      }
    }
    
 
    stage('Build Microservice Docker image') {
      container('docker') {
          sh """
            //Push to Docker hub registry
             // docker login -u 'username' -p 'password'
             // docker build -t contactsai123/userms .
             // docker push contactsai123/userms
            """
        }
      }
 
  
stage('Automation Test checkout') { // for display purposes
        git 'https://github.com/BushnevYuri/e2e-automation-pipeline.git'
    parallel(
    Smoke:{
    stage('Smoke') {
          container('maven') {
        try {
            sh "mvn clean verify -Dtags='type:Smoke'"
        } catch (err) {

        } finally {
            publishHTML (target: [
                    reportDir: 'target/site/serenity',
                    reportFiles: 'index.html',
                    reportName: "Smoke_tests_report"
            ])
        }
    }
    }
    },
    API:{
    stage('API') {
          container('maven') {
        try {
            sh "mvn clean verify -Dtags='type:API'"
        } catch (err) {

        } finally {
            publishHTML (target: [
                    reportDir: 'target/site/serenity',
                    reportFiles: 'index.html',
                    reportName: "API_tests_report"
            ])
        }
    }
    }
    }
    )
    }
        
    stage('Results') {
        junit '**/target/failsafe-reports/*.xml'
    }
   stage('Deploy to Staging') {
     echo "Deployment successful !"
    }
}
  }
